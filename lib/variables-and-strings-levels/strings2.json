{
  "levels": [
    {
      "playspace": {
        "level": 1,
        "activity": "appletree",
        "board": {
          "choices": ["word1", "word2"],
          "words": ["yard", "vine"],//the values that will be assigned, also the check function
          "variables": ["compound1"], //all variables
          "values": ["vineyard"], //values for check purposes
          "showValues": [null],//values to show in playspace initially
          "setVars": ["word1", "word2"],//variables that can't change
          "setVals": ["yard", "vine"],//values for non-changing variables
          "requiredCalls": {
            "word1": 2,
            "word2": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0
          }
        }
      },
      "workspace": {
        "codeSpace":"var compound1 = word1;"
      },
      "directions": {
        "dialogText": "There are strings stored in the \`word\` variables. Use the \`+\` operator to combine \`word1\` and \`word2\` in the \`compound1\` variable to create the word \`vineyard\`."
      },
      "mission": "Use the \`+\` operator to combine \`word1\` and \`word2\` in the correct order to have variable \`compound1\` store the string \`vineyard\`",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`yard\`\n\n\`word2\`- variable storing the string \`vine\`",
      "tips": "Your code should look similar to this:\n\n     var example = exampleWord1 + exampleWord2;"
    },
    {
      "playspace": {
        "level": 2,
        "activity": "beach",
        "board": {
          "choices": ["word1", "word2", "word3"],
          "words":["suit", "chair", "swim"],
          "variables": ["compound1"], //all variables
          "values": ["swimsuit"], //values for check purposes
          "showValues": [null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3"],//variables that can't change
          "setVals": ["suit", "chair", "swim"],//values for non-changing variables
          "requiredCalls": {
            "word1": 2,
            "word2": 0,
            "word3": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0
          }
        }
      },
      "workspace": {
        "codeSpace":"var compound1 = word1;"
      },
      "directions": {
        "dialogText": "Good work! Let's add more \`word\` variables. Give \`compound1\` a value of \`swimsuit\` by combining the correct \`word\` variables using the \`+\` operator."
      },
      "mission": "Give \`compound1\` a value of \`swimsuit\` by combining the correct \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`suit\` \n\n\`word2\`- variable storing the string \`chair\`\n\n\`word3\`- variable storing the string \`swim\`",
      "tips": "Your code should look similar to this:\n\n     var example = exampleWord1 + exampleWord2;"
    },
    {
      "playspace": {
        "level": 3,
        "activity": "pool",
        "board": {
          "choices": ["word1", "word2", "word3"],
          "words": ["dog", "ball", "cannon"],
          "variables": ["compound1"], //all variables
          "values": ["cannonball"], //values for check purposes
          "showValues": [null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3"],//variables that can't change
          "setVals": ["dog", "ball", "cannon"],//values for non-changing variables
          "requiredCalls": {
            "word1": 0,
            "word2": 2,
            "word3": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0
          }
        }
      },
      "workspace": {
        "codeSpace":"var compound1 = word1;"
      },
      "directions": {
        "dialogText": "Awesome! Now let's give \`compound1\` a value of \`surfboard\` by combining the correct \`word\` variables using the \`+\` operator."
      },
      "mission": "Give \`compound1\` a value of \`cannonball\` by combining two of the \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`dog\`\n\n\`word2\`- variable storing the string \`ball\`\n\n\`word3\`- variable storing the string \`cannon\`",
      "tips": "Your code should look similar to this:\n\n     var example = exampleWord1 + exampleWord2;"
    },
    {
      "playspace": {
        "level": 4,
        "activity": "appletree",
        "board": {
          "choices": ["word1", "word2", "word3"],
          "words": ["house", "top", "tree"],
          "variables": ["compound1", "compound2"], //all variables
          "values": ["treehouse", "treetop"], //values for check purposes
          "showValues": [null, null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3"],//variables that can't change
          "setVals": ["house", "top", "tree"],//values for non-changing variables
          "requiredCalls": {
            "word1": 2,
            "word2": 2,
            "word3": 4
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0
          }
        }
      },
      "workspace": {
        "codeSpace":"var compound1 = ;\nvar compound2 = ;"
      },
      "directions": {
        "dialogText": "Great! Let's make TWO different \`compounds\` by combining \`word\` variables!"
      },
      "mission": "Give \`compound1\` a value of \`treehouse\`, and \`compound2\` a value of \`treetop\`, by combining \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`house\`\n\n\`word2\`- variable storing the string \`top\`\n\n\`word3\`- variable storing the string \`tree\`",
      "tips": "You may use a \`word\` variable more than once. Your code should look similar to this:\n\n     var example = exampleWord1 + exampleWord2;"
    },
    {
      "playspace": {
        "level": 5,
        "activity": "beach",
        "board": {
          "choices": ["word1", "word2", "word3"],
          "words": ["paddle", "fish", "jelly"],
          "variables": ["compound1", "compound2"], //all variables
          "values": ["paddlefish", "jellyfish"], //values for check purposes
          "showValues": [null, null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3"],//variables that can't change
          "setVals": ["paddle", "fish", "jelly"],//values for non-changing variables
          "requiredCalls": {
            "word1": 2,
            "word2": 4,
            "word3": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0
          }
        }
      },
      "workspace": {
        "codeSpace":""
      },
      "directions": {
        "dialogText": "You're doing a fantastic job! Can you write the entire variable yourself?"
      },
      "mission": "Give \`compound1\` a value of \`paddlefish\`, and \`compound2\` a value of \`jellyfish\`, by combining \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`paddle\`\n\n\`word2\`- variable storing the string \`fish\`\n\n\`word3\`- variable storing the string \`jelly\`",
      "tips": "You may use a \`word\` variable more than once. Your code should look similar to this:\n\n     var example = exampleWord1 + exampleWord2;"
    },
    {
      "playspace": {
        "level": 6,
        "activity": "pool",
        "board": {
          "choices": ["word1", "word2", "word3" ,"word4"],
          "words": ["stroke", "back", "computer", "side"],
          "variables": ["compound1", "compound2"], //all variables
          "values": ["backstroke", "sidestroke"], //values for check purposes
          "showValues": [null, null, null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3" ,"word4"],//variables that can't change
          "setVals": ["stroke", "back", "computer", "side"],//values for non-changing variables
          "requiredCalls": {
            "word1": 4,
            "word2": 2,
            "word3": 0,
            "word4": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0,
            "word4": 0
          }
        }
      },
      "workspace": {
        "codeSpace":""
      },
      "directions": {
        "dialogText": "Let's keep going! You're doing great so far! Let's make two more \`compound\` words!"
      },
      "mission": "Give \`compound1\` a value of \`backstroke\`, and \`compound2\` a value of \`sidestroke\`, by combining \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`stroke\`\n\n\`word2\`- variable storing the string \`back\`\n\n\`word3\`- variable storing the string \`computer\`\n\n\`word4\`- variable storing the string \`side\`",
      "tips": "You may use a \`word\` variable more than once. Your code should look similar to this:\n\n     var example = exampleWord1 + exampleWord2;"
    },
    {
      "playspace": {
        "level": 7,
        "activity": "appletree",
        "board": {
          "choices": ["word1", "word2", "word3" ,"word4"],
          "words": ["straw", "berry", "blue", "black"],
          "variables": ["compound1", "compound2", "compound3"], //all variables
          "values": ["strawberry", "blueberry", "blackberry"], //values for check purposes
          "showValues": [null, null, null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3" ,"word4"],//variables that can't change
          "setVals": ["straw", "berry", "blue", "black"],//values for non-changing variables
          "requiredCalls": {
            "word1": 2,
            "word2": 6,
            "word3": 2,
            "word4": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0,
            "word4": 0
          }
        }
      },
      "workspace": {
        "codeSpace":""
      },
      "directions": {
        "dialogText": "Amazing! Can you make THREE \`compound\` variables?"
      },
      "mission": "Give \`compound1\` a value of \`strawberry\`,  \`compound2\` a value of \`blueberry\`, and \`compound3\` a value of \`blackberry\` by combining \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`straw\`\n\n\`word2\`- variable storing the string \`berry\`\n\n\`word3\`- variable storing the string \`blue\`\n\n\`word4\`- variable storing the string \`black\`",
      "tips": "You may use a \`word\` variable more than once. Your code should look similar to this:\n\n     var example = exampleWord1 + exampleWord2;"
    },
    {
      "playspace": {
        "level": 8,
        "activity": "beach",
        "board": {
          "choices": ["word1", "word2", "word3" ,"word4"],
          "words": ["shore", "shell", "gull", "sea"],
          "variables": ["compound1", "compound2", "compound3"], //all variables
          "values": ["seashell", "seagull", "seashore"], //values for check purposes
          "showValues": [null, null, null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3" ,"word4"],//variables that can't change
          "setVals": ["shore", "shell", "gull", "sea"],//values for non-changing variables
          "requiredCalls": {
            "word1": 2,
            "word2": 2,
            "word3": 2,
            "word4": 6
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0,
            "word4": 0
          }
        }
      },
      "workspace": {
        "codeSpace":""
      },
      "directions": {
        "dialogText": "Let's continue to practice making three \`compound\` variables!"
      },
      "mission": "Give \`compound1\` a value of \`seashell\`,  \`compound2\` a value of \`seagull\`, and \`compound3\` a value of \`seashore\` by combining \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`shore\`\n\n\`word2\`- variable storing the string \`shell\`\n\n\`word3\`- variable storing the string \`gull\`\n\n\`word4\`- variable storing the string \`sea\`",
      "tips": "Combine \`word\` variables in the correct order to store the \`compound\` variable values"
    },
    {
      "playspace": {
        "level": 9,
        "activity": "pool",
        "board": {
          "choices": ["word1", "word2", "word3" ,"word4"],
          "words": ["board", "surf", "paddle", "long"],
          "variables": ["compound1", "compound2", "compound3"], //all variables
          "values": ["surfboard", "paddleboard", "longboard"], //values for check purposes
          "showValues": [null, null, null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3" ,"word4"],//variables that can't change
          "setVals": ["board", "surf", "paddle", "long"],//values for non-changing variables
          "requiredCalls": {
            "word1": 6,
            "word2": 2,
            "word3": 2,
            "word4": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0,
            "word4": 0
          }
        }
      },
      "workspace": {
        "codeSpace":""
      },
      "directions": {
        "dialogText": "You've done an amazing job so far. Let's keep making more \`compound\` variables!"
      },
      "mission": "Give \`compound1\` a value of \`surfboard\`,  \`compound2\` a value of \`paddleboard\`, and \`compound3\` a value of \`longboard\` by combining \`word\` variables using the \`+\` operator.",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`board\`\n\n\`word2\`- variable storing the string \`surf\`\n\n\`word3\`- variable storing the string \`paddle\`\n\n\`word4\`- variable storing the string \`long\`",
      "tips": "Combine \`word\` variables in the correct order to store the \`compound\` variable values"
    },
    {
      "playspace": {
        "level": 10,
        "activity": "appletree",
        "board": {
          "choices": ["word1", "word2", "word3" ,"word4"],
          "words": ["pine", "sauce", "crab", "apple"],
          "variables": ["compound1"], //all variables
          "values": ["applesauce"], //values for check purposes
          "showValues": [null, null, null],//values to show in playspace initially
          "setVars": ["word1", "word2", "word3" ,"word4"],//variables that can't change
          "setVals": ["pine", "sauce", "crab", "apple"],//values for non-changing variables
          "requiredCalls": {
            "word1": 0,
            "word2": 2,
            "word3": 0,
            "word4": 2
          },
          "numberCalls": {
            "word1": 0,
            "word2": 0,
            "word3": 0,
            "word4": 0
          }
        }
      },
      "workspace": {
        "codeSpace":"var compound1 = ;"
      },
      "directions": {
        "dialogText": "It's your turn to guess what value belongs in the \`compound1\` variable!"
      },
      "mission": "The value of \`compound1\` is a type of food that can be made with apples",
      "tools": "\`compound1\`- empty variable\n\n\`word1\`- variable storing the string \`pine\`\n\n\`word2\`- variable storing the string \`sauce\`\n\n\`word3\`- variable storing the string \`crab\`\n\n\`word4\`- variable storing the string \`apple\`",
      "tips": "Mix and match the \`word\` variables to find a food that can be made with apples"
    }
  ]
}
